@page "/hotel-room/create"
@page "/hotel-room/edit/{Id:int}"
@using Business.Repository.IRepository

<!-- 여기 있는것들은 dependency Injection 기능임. Startup 에 service.add 를 먼줘 해줘야함 -->
@inject IHotelRoomRepository HotelRoomRepository
@inject IHotelImageRepository HotelImagesRepository
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject IFileUpload FileUpload

<div class="row mt-2 mb-5">
  <h3 class="card-title text-info mb-3 ml-3">@Title Create Hotel Room</h3>
  <div class="col-md-12">
    <div class="card-body">
      <EditForm Model="HotelRoomModel" OnValidSubmit="HandleHotelRoomUpsert">
        <DataAnnotationsValidator />
        @*<ValidationSummary/>*@
        <!-- Model == DTO -->
        <div class="form-group">
          <label>Name</label>
          <InputText @bind-Value="HotelRoomModel.Name" class="form-control"></InputText>
          <ValidationMessage For="()=>HotelRoomModel.Name"></ValidationMessage>
        </div>
        <div class="form-group">
          <label>Occupancy</label>
          <InputNumber @bind-Value="HotelRoomModel.Occupancy" class="form-control"></InputNumber>
          <ValidationMessage For="()=>HotelRoomModel.Occupancy"></ValidationMessage>
        </div>
        <div class="form-group">
          <label>Rate</label>
          <InputNumber @bind-Value="HotelRoomModel.RegularRate" class="form-control"></InputNumber>
          <ValidationMessage For="()=>HotelRoomModel.RegularRate"></ValidationMessage>
        </div>
        <div class="form-group">
          <label>Sq Ft.</label>
          <InputText @bind-Value="HotelRoomModel.SqFt" class="form-control"></InputText>
        </div>
        <div class="form-group">
          <label>Details</label>
          @*<InputTextArea @bind-Value="HotelRoomModel.Details" class="form-control"></InputTextArea>*@
          <BlazoredTextEditor @ref="@QuillHtml">
            <ToolbarContent>
              <select class="ql-header">
                <option selected=""></option>
                <option value="1"></option>
                <option value="2"></option>
                <option value="3"></option>
                <option value="4"></option>
                <option value="5"></option>
              </select>
              <span class="ql-formats">
                <button class="ql-bold"></button>
                <button class="ql-italic"></button>
                <button class="ql-underline"></button>
                <button class="ql-strike"></button>
              </span>
              <span class="ql-formats">
                <select class="ql-color"></select>
                <select class="ql-background"></select>
              </span>
              <span class="ql-formats">
                <button class="ql-list" value="ordered"></button>
                <button class="ql-list" value="bullet"></button>
              </span>
              <span class="ql-formats">
                <button class="ql-link"></button>
              </span>
            </ToolbarContent>
            <EditorContent>

            </EditorContent>
          </BlazoredTextEditor>
        </div>
        <div class="form-group">
          <InputFile OnChange="HandleImageUpload" multiple accept="image/*"></InputFile>
          <div class="row">
            @if (IsImageUploadProcessStarted)
            {
              <div class="col-md-12">
                <span><i class="fade fa-spin fa-spinner"></i>Please wait... Images are uploading</span>
              </div>
            }
            @if (HotelRoomModel.ImageUrls != null && HotelRoomModel.ImageUrls.Any())
            {
              int serial = 1;
              foreach (var roomImage in HotelRoomModel.ImageUrls)
              {
                <div class="col-md-2 mt-3">
                  <div class="room-image" style="background:url('@roomImage') 50% 50%">
                    <span class="room-image-title">@serial</span>
                  </div>
                  <button type="button" @onclick="()=>DeletePhoto(roomImage)" class="btn btn-outline-danger btn-block mt-4">Delete</button>
                </div>
                serial++;
              }
            }
          </div>
        </div>
        <div class="form-group">
          <button class="btn btn-primary">@Title Room </button>
          <NavLink href="hotel-room" class="btn btn-secondary">Back to Index</NavLink>
        </div>
      </EditForm>
    </div>
  </div>
</div>

@code {
  // Model == DTO
  private HotelRoomDTO HotelRoomModel { get; set; } = new HotelRoomDTO();
  private string Title { get; set; } = "Create";
  private HotelRoomImageDTO RoomImage { get; set; } = new HotelRoomImageDTO();
  private List<string> DeletedImageNames { get; set; } = new List<string>();
  private readonly int maxAllowedFiles = 1000;

  public BlazoredTextEditor QuillHtml { get; set; } = new BlazoredTextEditor();

  [Parameter] public int? Id { get; set; }

  private bool IsImageUploadProcessStarted { get; set; } = false;

  protected override async Task OnInitializedAsync()
  {
    if (Id != null)
    {
      Title = "Update";
      HotelRoomModel = await HotelRoomRepository.GetHotelRoom(Id.Value);
      if (HotelRoomModel?.HotelRoomImages != null)
      {
        HotelRoomModel.ImageUrls = HotelRoomModel.HotelRoomImages.Select(u => u.RoomImageUrl).ToList();
      }
    }
    else
    {
      HotelRoomModel = new HotelRoomDTO();
    }
  }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (!firstRender)
    {
      return;
    }
    bool loading = true;
    while (loading)
    {
      try
      {
        if (!string.IsNullOrEmpty(HotelRoomModel.Details))
        {
          await this.QuillHtml.LoadHTMLContent(HotelRoomModel.Details);
        }
        loading=false;
      }
      catch (Exception ex)
      {
        await Task.Delay(10);
        loading = true;
      }
    }
  }

  private async Task HandleHotelRoomUpsert()
  {
    try
    {
      var roomDetailsByName = await HotelRoomRepository.IsRoomUnique(HotelRoomModel.Name, HotelRoomModel.Id);
      if (roomDetailsByName != null)
      {
        await JsRuntime.ToastrError("Room name alrdy Exists");
        return;
      }
      if (HotelRoomModel.Id > 0 && Title == "Update")
      {
        HotelRoomModel.Details = await QuillHtml.GetHTML();
        var updateRoomResult = await HotelRoomRepository.UpdateHotelRoom(HotelRoomModel.Id, HotelRoomModel);
        if ((HotelRoomModel.ImageUrls != null && HotelRoomModel.ImageUrls.Any()) || (DeletedImageNames != null && DeletedImageNames.Any()))
        {
          if (DeletedImageNames != null && DeletedImageNames.Any())
          {
            foreach (var deletedImageName in DeletedImageNames)
            {
              var imageName = deletedImageName.Replace($"RoomImages/", "");
              var result = FileUpload.DeleteFile(imageName);
              await HotelImagesRepository.DeleteHotelRoomImageByImageUrl(deletedImageName);
            }
          }
          await AddHotelRoomImage(updateRoomResult);
        }
        await JsRuntime.ToastrSuccess("Hotel room updated successfully");
      }
      else
      {
        HotelRoomModel.Details = await QuillHtml.GetHTML();
        var createdResult = await HotelRoomRepository.CreateHotelRoom(HotelRoomModel);
        await AddHotelRoomImage(createdResult);
        await JsRuntime.ToastrSuccess("Hotel room created successfully");
      }
    }
    catch (Exception ex)
    {
      // log exception
    }

    NavigationManager.NavigateTo("hotel-room");
  }

  private async Task HandleImageUpload(InputFileChangeEventArgs e)
  {
    IsImageUploadProcessStarted = true;
    try
    {
      var images = new List<string>();
      if (e.GetMultipleFiles(maxAllowedFiles).Count > 0)
      {
        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
          if (file.ContentType.StartsWith("image"))
          {
            // www root folder 밑에있는 파일의 경로를 리턴해줌
            var uploadedImagePath = await FileUpload.UploadFile(file);
            images.Add(uploadedImagePath);
          }
          else
          {
            await JsRuntime.ToastrError("upload only images");
            return;
          }
        }
        if (images.Any())
        {
          if (HotelRoomModel.ImageUrls != null && HotelRoomModel.ImageUrls.Any())
          {
            HotelRoomModel.ImageUrls.AddRange(images);
          }
          else
          {
            HotelRoomModel.ImageUrls = new List<string>();
            HotelRoomModel.ImageUrls.AddRange(images);
          }
        }
        else
        {
          await JsRuntime.ToastrError("error in uploading images");
          return;
        }
      }
      IsImageUploadProcessStarted = false;
    }
    catch (Exception ex)
    {
      await JsRuntime.ToastrError(ex.Message);
      return;
    }
  }

  private async Task AddHotelRoomImage(HotelRoomDTO roomDetails)
  {
    //roomDetails == DB 메인 테이블에서 반영된 정보. 사진 테이블 정보는 없음
    //HotelRoomModel == 프론트에서 조작된 자료를 반영하고 있는놈
    foreach (var imageUrl in HotelRoomModel.ImageUrls)
    {
      /* null 인 프로퍼티에서 .Where 함수를 실행시키면 exception이 일어남
       HotelRoomModel.HotelRoomImages 프로퍼티는 이미 DB에 저장된 이미지만을 가지고 있음.
       imageUrl 은 Db 이미지+새로 추가한 이미지
       DB 에 저장된것중에 imageUrl 과 같은게 없으면 새로 추가된 이미지이니, DB에 추가하라 */
      if (HotelRoomModel.HotelRoomImages == null || HotelRoomModel.HotelRoomImages.Where(x => x.RoomImageUrl == imageUrl).Count() < 1)
      {
        RoomImage = new HotelRoomImageDTO()
        {
          RoomId = roomDetails.Id,
          RoomImageUrl = imageUrl
        };
        await HotelImagesRepository.CreateHotelRoomImage(RoomImage);
      }
    }
  }

  internal async Task DeletePhoto(string imageUrl)
  {
    try
    {
      Console.WriteLine("entered dletephoto");
      var imageIndex = HotelRoomModel.ImageUrls.FindIndex(x => x == imageUrl);
      var imageName = imageUrl.Replace($"RoomImages/", "");
      if (HotelRoomModel.Id < 1 && Title == "Create")
      {
        var result = FileUpload.DeleteFile(imageName);
      }
      else
      {
        DeletedImageNames ??= new List<string>();
        DeletedImageNames.Add(imageUrl);
      }
      HotelRoomModel.ImageUrls.RemoveAt(imageIndex);
    }
    catch (Exception ex)
    {
      await JsRuntime.ToastrError(ex.Message);
    }
  }

  public void SetHTML()
  {
    if (!string.IsNullOrEmpty(HotelRoomModel.Details))
    {
      this.QuillHtml.LoadHTMLContent(HotelRoomModel.Details);
    }
    StateHasChanged();
  }

}
