@page "/hotel-room"
@using Models
@using Business.Repository.IRepository
@inject IHotelRoomRepository HotelRoomRepository
@inject IJSRuntime JsRuntime
@inject IFileUpload FileUpload
@inject NavigationManager NavigationManager
<div class="row mt-4">
  <div class="col-8">
    <h4 class="card-title text-info">Hotel Room's</h4>
  </div>
  <div class="col-3 offset-1">
    <NavLink href="hotel-room/create" class="btn btn-info form-control">Add New HotelRoom</NavLink>
  </div>
</div>
<div class="row mt-4">
  <div class="col-12">
    <table class="table table-bordered table-hover">
      <thead>
        <tr>
          <th>Name</th>
          <th>Occupancy</th>
          <th>Rate</th>
          <th>Sq Ft.</th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        @if (HotelRooms.Any())
        {
          foreach (var room in HotelRooms)
          {
            <tr>
              <td>@room.Name</td>
              <td>@room.Occupancy</td>
              <td>@room.RegularRate.ToString("c")</td> <!-- currency -->
              <td>@room.SqFt</td>
              <td>
                <NavLink href="@($"hotel-room/edit/{room.Id}")" class="btn btn-primary">Edit</NavLink>
                <button class="btn btn-danger" @onclick="()=>HandleDelete(room.Id)">Delete</button>
              </td>
            </tr>
          }
        }
        else
        {
          <tr>
            <td colspan="5">No records found</td>
          </tr>
        }
      </tbody>
    </table>
  </div>

</div>

<DeleteConfirmation parentCompIsProcessing="isProcessing" ConfirmationChanged="ConfirmDelete_Click"></DeleteConfirmation>

@code {
  private IEnumerable<HotelRoomDTO> HotelRooms { get; set; } = new List<HotelRoomDTO>();
  private int? RoomId { get; set; } = null;
  private bool isProcessing { get; set; } = false;

  protected override async Task OnInitializedAsync()
  {
    HotelRooms = await HotelRoomRepository.GetAllHotelRoom();
  }
  private async Task HandleDelete(int roomId)
  {
    RoomId = roomId;
    await JsRuntime.InvokeVoidAsync("ShowDeleteConfirmationModal");
  }
  public async Task ConfirmDelete_Click(bool isConfirmed)
  {
    isProcessing = true;
    if (isConfirmed && RoomId != null)
    {
      HotelRoomDTO hotelRoom = await HotelRoomRepository.GetHotelRoom(RoomId.Value);
      foreach (var image in hotelRoom.HotelRoomImages)
      {
        var imageName = image.RoomImageUrl.Replace($"{NavigationManager.BaseUri}RoomImages/", "");
        FileUpload.DeleteFile(imageName);
      }
      await HotelRoomRepository.DeleteHotelRoom(RoomId.Value);
      await JsRuntime.ToastrSuccess("Romm Deleted Successfuly");
      HotelRooms = await HotelRoomRepository.GetAllHotelRoom();
    }
    await JsRuntime.InvokeVoidAsync("HideDeleteConfirmationModal");
    isProcessing = false;
  }
}
