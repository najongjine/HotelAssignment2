@using System.Threading.Tasks
@using System.Timers
@page "/lifecycle"
<h3>LifeCycle</h3>
<h3>Now: @now</h3>

<div class="border">
  <LifeCycleComponent CountValue="@currentCount"></LifeCycleComponent>
</div>

<h1>Counter</h1>

<p>Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>
<div>
  @foreach (var item in EventType)
  {
    @item
    <hr />
  }
</div>

<div>
  <button @onclick="NowDate">NowDate</button>
</div>

@code {
  private int currentCount = 0;
  private string now = null;
  List<string> EventType = new List<string>();
  private Timer timer = new Timer(1000);

  private void IncrementCount()
  {
    currentCount++;
  }

  protected override void OnInitialized()
  {
    base.OnInitialized();

    EventType.Add("Oninitialized called");
    //timer.Elapsed += (sender, EventArgs) => Timer_TICK();
    //timer.Start();

  }

  protected override async Task OnInitializedAsync()
  {
    await base.OnInitializedAsync();
    EventType.Add("OninitializedAsync called");
  }

  protected override void OnParametersSet()
  {
    EventType.Add("OnParametersSet called");
  }
  protected override async Task OnParametersSetAsync()
  {
    EventType.Add("OnParametersSetAsync called");
  }

  protected override void OnAfterRender(bool firstRender)
  {
    if (firstRender)
    {
      currentCount = 111;
    }
    else
    {
      currentCount = 999;
    }
    EventType.Add("OnAferRender is called");
  }

  private void Timer_TICK()
  {
    _ = InvokeAsync(() =>
    {
      now = DateTime.UtcNow.ToString();
      //StateHasChanged();
    });
  }

  public void NowDate()
  {
    now = DateTime.UtcNow.ToString();
  }
}
