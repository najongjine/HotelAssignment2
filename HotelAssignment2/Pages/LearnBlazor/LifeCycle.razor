@using System.Threading
@page "/lifecycle"
@inject IJSRuntime JsRuntime
<h3>LifeCycle</h3>
<h3>Now: @now</h3>

<div class="border">
  <LifeCycleComponent CountValue="@currentCount"></LifeCycleComponent>
</div>

<h1>Counter</h1>

<p>Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>
<br /> @Count  <button class="btn btn-primary" @onclick="StartCountDown">Start Countdown</button>
<div>
  @foreach (var item in EventType)
  {
    @item
    <hr />
  }
</div>

@code {
  private int currentCount = 0;
  private string now = null;
  List<string> EventType = new List<string>();
  private int Count { get; set; } = 5;

  private void IncrementCount()
  {
    currentCount++;
  }

  protected override void OnInitialized()
  {
    base.OnInitialized();

    EventType.Add("Oninitialized called");
    //timer.Elapsed += (sender, EventArgs) => Timer_TICK();
    //timer.Start();

  }

  protected override async Task OnInitializedAsync()
  {
    await base.OnInitializedAsync();
    EventType.Add("OninitializedAsync called");

  }

  protected override void OnParametersSet()
  {
    EventType.Add("OnParametersSet called");
  }
  protected override async Task OnParametersSetAsync()
  {
    EventType.Add("OnParametersSetAsync called");
  }

  protected override void OnAfterRender(bool firstRender)
  {
    if (firstRender)
    {
      currentCount = 111;
    }
    else
    {
      currentCount = 999;
    }
    EventType.Add("OnAferRender is called");

  }

  protected override bool ShouldRender()
  {
    EventType.Add("ShouldRender is called");
    return true;
  }

  void StartCountDown()
  {
    var timer = new Timer(TimeCallBack, null, 1000, 1000);
  }
  void TimeCallBack(object state)
  {
    if (Count > 0)
    {
      Count--;
      InvokeAsync(StateHasChanged);
    }
  }
}
