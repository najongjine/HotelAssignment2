@page "/demohotel"
@inject IJSRuntime JsRunTime


<div class="border p-2 mt-2" style="background-color:azure">
  <h2 class="text-info">
    RoomList [Using Component]
  </h2>
  <div class="row container">
    <div class="col-12">
      <h4>Hotel Room's</h4>
      <span>Rooms Selected - @SelectedRooms</span>
    </div>
    @foreach (var item in RoomList)
    {
      <IndividualRoom OnRoomCheckboxSelectionChanged="RoomSelectionCounterChanged" Room="@item"></IndividualRoom>
    }
    <div class="col-12 mt-4">
      <h2>Hotel Amenitie's</h2>
    </div>
    @foreach (var item in Amenities)
    {
  <AmenitiePage OnSelectedAmenity="AmenitySelectionChanged" Amenitie="item">
    <FirstFragment>#1</FirstFragment>
    <SecondFragment>#2</SecondFragment>
  </AmenitiePage>
    }
  </div>

  <div class="col-12">
    <p class="text-secondary"> Selected Amenity: @SelectedAmenity</p>
  </div>
</div>

@code{
  private string SelectedAmenity { get; set; } = "";
  public int SelectedRooms { get; set; } = 0;
  List<BlazorRoom> RoomList = new List<BlazorRoom>();
  List<BlazorAmenitie> Amenities = new List<BlazorAmenitie>();

  protected override  async Task OnInitializedAsync()
  {
    base.OnInitialized();

    RoomList.Add(new BlazorRoom()
    {
      Id = 1,
      RoomName = "t1",
      IsActive = true,
      Price = 111,
      RoomProps = new List<BlazorRoomProp> {
        new BlazorRoomProp{Id=1,Name="sq ft",Value="100"},
        new BlazorRoomProp{Id=2,Name="occupancy",Value="3"}
      }
    });
    RoomList.Add(new BlazorRoom()
    {
      Id = 2,
      RoomName = "t2",
      IsActive = true,
      Price = 222,
      RoomProps = new List<BlazorRoomProp> {
        new BlazorRoomProp{Id=1,Name="sq ft",Value="200"},
        new BlazorRoomProp{Id=2,Name="occupancy",Value="23"}
      }
    });
    Amenities.Add(new BlazorAmenitie { Id = 1, name = "swimming pool", description = "clean" });
    Amenities.Add(new BlazorAmenitie { Id = 2, name = "dining room", description = "good" });
    Amenities.Add(new BlazorAmenitie { Id = 3, name = "gym", description = "big" });


  }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    await InitIamport();
    //await IamportRequestPay();
  }

  private async Task InitIamport()
  {
    await JsRunTime.InvokeVoidAsync("IamportInit");
  }

  private async Task IamportRequestPay()
  {
    await JsRunTime.InvokeVoidAsync("IamportRequestPay");
  }

  protected void RoomSelectionCounterChanged(bool isRoomSelected)
  {
    if (isRoomSelected)
    {
      SelectedRooms++;
    }
    else
    {
      SelectedRooms--;
    }
  }
  protected void AmenitySelectionChanged(string _amenity)
  {
    SelectedAmenity = _amenity;
  }
}
